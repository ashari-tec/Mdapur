import { useState } from 'react';
import { ShoppingItem } from '@/types/kitchen';
import { convertToBaseUnit, getBaseUnit } from '@/lib/unitConversion';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Plus, ShoppingCart, Check, Trash2, Edit2, Save, X } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

interface ShoppingListProps {
  items: ShoppingItem[];
  onAdd: (item: Omit<ShoppingItem, 'id' | 'createdAt'>) => void;
  onUpdate: (id: string, updates: Partial<ShoppingItem>) => void;
  onMarkPurchased: (id: string) => void;
  onRemove: (id: string) => void;
}

export const ShoppingList = ({ items, onAdd, onUpdate, onMarkPurchased, onRemove }: ShoppingListProps) => {
  const [newItem, setNewItem] = useState({
    name: '',
    category: '',
    quantity: 1,
    unit: 'kg',
    price: 0,
  });

  const [showAddForm, setShowAddForm] = useState(false);
  const [editingItem, setEditingItem] = useState<string | null>(null);
  const [editForm, setEditForm] = useState({ quantity: 1, unit: 'kg' });

  const categories = [
    'Bahan Pokok',
    'Bumbu',
    'Protein',
    'Dairy',
    'Sayuran',
    'Buah',
    'Minuman',
    'Snack',
    'Lainnya'
  ];

  const units = [
    'kg', 'g', 'liter', 'ml', 'butir', 'buah', 'lembar', 'bungkus', 'botol', 'kaleng'
  ];

  const handleAddItem = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newItem.name || !newItem.category) {
      toast({
        title: "Form tidak lengkap",
        description: "Nama dan kategori harus diisi.",
        variant: "destructive",
      });
      return;
    }

    // Konversi ke satuan dasar
    const baseUnit = getBaseUnit(newItem.name) || 'gram';
    const baseConversion = convertToBaseUnit(newItem.name, newItem.quantity, newItem.unit);
    const baseQuantity = baseConversion?.quantity || newItem.quantity;

    onAdd({
      ...newItem,
      baseQuantity,
      baseUnit,
      isAutoGenerated: false,
      isPurchased: false,
    });

    setNewItem({
      name: '',
      category: '',
      quantity: 1,
      unit: 'kg',
      price: 0,
    });
    
    setShowAddForm(false);
    
    toast({
      title: "Item ditambahkan ke daftar belanja",
      description: `${newItem.name} telah ditambahkan.`,
    });
  };

  const handleMarkPurchased = (item: ShoppingItem) => {
    onMarkPurchased(item.id);
    toast({
      title: "Item telah dibeli",
      description: `${item.name} telah ditandai sebagai dibeli dan ditambahkan ke stok.`,
    });
  };

  const startEdit = (item: ShoppingItem) => {
    setEditingItem(item.id);
    setEditForm({ quantity: item.quantity, unit: item.unit });
  };

  const saveEdit = (item: ShoppingItem) => {
    onUpdate(item.id, editForm);
    setEditingItem(null);
    toast({
      title: "Item diperbarui",
      description: `${item.name} telah diperbarui.`,
    });
  };

  const cancelEdit = () => {
    setEditingItem(null);
  };

  const autoGeneratedItems = items.filter(item => item.isAutoGenerated && !item.isPurchased);
  const manualItems = items.filter(item => !item.isAutoGenerated && !item.isPurchased);
  
  return (
    <div className="space-y-6">
      {/* Add Item Button */}
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Daftar Belanja</h3>
        <Button 
          onClick={() => setShowAddForm(!showAddForm)}
          variant="outline"
          className="flex items-center gap-2"
        >
          <Plus className="h-4 w-4" />
          Tambah Item Manual
        </Button>
      </div>

      {/* Add Item Form */}
      {showAddForm && (
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Tambah Item ke Daftar Belanja</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleAddItem} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="shop-name">Nama Item</Label>
                  <Input
                    id="shop-name"
                    value={newItem.name}
                    onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
                    placeholder="Contoh: Susu, Telur, dll"
                  />
                </div>
                <div>
                  <Label htmlFor="shop-category">Kategori</Label>
                  <Select 
                    value={newItem.category} 
                    onValueChange={(value) => setNewItem({ ...newItem, category: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Pilih kategori" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map(category => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="shop-quantity">Jumlah</Label>
                  <Input
                    id="shop-quantity"
                    type="number"
                    step="0.1"
                    min="0.1"
                    value={newItem.quantity}
                    onChange={(e) => setNewItem({ ...newItem, quantity: parseFloat(e.target.value) || 1 })}
                  />
                </div>
                <div>
                  <Label htmlFor="shop-unit">Satuan</Label>
                  <Select 
                    value={newItem.unit} 
                    onValueChange={(value) => setNewItem({ ...newItem, unit: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {units.map(unit => (
                        <SelectItem key={unit} value={unit}>
                          {unit}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div>
                <Label htmlFor="shop-price">Estimasi Harga (Rp) - Opsional</Label>
                <Input
                  id="shop-price"
                  type="number"
                  min="0"
                  value={newItem.price}
                  onChange={(e) => setNewItem({ ...newItem, price: parseInt(e.target.value) || 0 })}
                  placeholder="0"
                />
              </div>
              <div className="flex gap-2">
                <Button type="submit" className="flex items-center gap-2">
                  <Plus className="h-4 w-4" />
                  Tambah ke Daftar
                </Button>
                <Button type="button" variant="outline" onClick={() => setShowAddForm(false)}>
                  Batal
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}

      {/* Auto-generated Items */}
      {autoGeneratedItems.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-base flex items-center gap-2">
              <ShoppingCart className="h-4 w-4" />
              Otomatis Ditambahkan (Stok Habis)
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {autoGeneratedItems.map((item) => (
              <div key={item.id} className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                <div className="flex items-center space-x-3 flex-1">
                  <Checkbox
                    id={`auto-${item.id}`}
                    onCheckedChange={() => handleMarkPurchased(item)}
                  />
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="font-medium">{item.name}</span>
                      <Badge variant="outline" className="text-xs">
                        Auto
                      </Badge>
                    </div>
                    {editingItem === item.id ? (
                      <div className="flex items-center gap-2 text-sm">
                        <Input
                          type="number"
                          step="0.1"
                          min="0.1"
                          value={editForm.quantity}
                          onChange={(e) => setEditForm({ ...editForm, quantity: parseFloat(e.target.value) || 1 })}
                          className="w-20 h-8"
                        />
                        <Select 
                          value={editForm.unit} 
                          onValueChange={(value) => setEditForm({ ...editForm, unit: value })}
                        >
                          <SelectTrigger className="w-20 h-8">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {units.map(unit => (
                              <SelectItem key={unit} value={unit}>
                                {unit}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <span className="text-muted-foreground">â€¢ {item.category}</span>
                      </div>
                    ) : (
                      <div className="text-sm text-muted-foreground">
                        {item.quantity} {item.unit} â€¢ {item.category}
                        {item.price && item.price > 0 && (
                          <span> â€¢ Rp {item.price.toLocaleString('id-ID')}</span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
                <div className="flex items-center gap-1">
                  {editingItem === item.id ? (
                    <>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => saveEdit(item)}
                        className="text-green-600 hover:text-green-700 h-8 w-8 p-0"
                      >
                        <Save className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={cancelEdit}
                        className="text-muted-foreground hover:text-foreground h-8 w-8 p-0"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </>
                  ) : (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => startEdit(item)}
                      className="text-muted-foreground hover:text-foreground h-8 w-8 p-0"
                    >
                      <Edit2 className="h-4 w-4" />
                    </Button>
                  )}
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => onRemove(item.id)}
                    className="text-muted-foreground hover:text-destructive h-8 w-8 p-0"
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      )}

      {/* Manual Items */}
      {manualItems.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Item Manual</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {manualItems.map((item) => (
              <div key={item.id} className="flex items-center justify-between p-3 bg-card border rounded-lg">
                <div className="flex items-center space-x-3 flex-1">
                  <Checkbox
                    id={`manual-${item.id}`}
                    onCheckedChange={() => handleMarkPurchased(item)}
                  />
                  <div className="flex-1">
                    <div className="font-medium mb-1">{item.name}</div>
                    {editingItem === item.id ? (
                      <div className="flex items-center gap-2 text-sm">
                        <Input
                          type="number"
                          step="0.1"
                          min="0.1"
                          value={editForm.quantity}
                          onChange={(e) => setEditForm({ ...editForm, quantity: parseFloat(e.target.value) || 1 })}
                          className="w-20 h-8"
                        />
                        <Select 
                          value={editForm.unit} 
                          onValueChange={(value) => setEditForm({ ...editForm, unit: value })}
                        >
                          <SelectTrigger className="w-20 h-8">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {units.map(unit => (
                              <SelectItem key={unit} value={unit}>
                                {unit}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <span className="text-muted-foreground">â€¢ {item.category}</span>
                      </div>
                    ) : (
                      <div className="text-sm text-muted-foreground">
                        {item.quantity} {item.unit} â€¢ {item.category}
                        {item.price && item.price > 0 && (
                          <span> â€¢ Rp {item.price.toLocaleString('id-ID')}</span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
                <div className="flex items-center gap-1">
                  {editingItem === item.id ? (
                    <>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => saveEdit(item)}
                        className="text-green-600 hover:text-green-700 h-8 w-8 p-0"
                      >
                        <Save className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={cancelEdit}
                        className="text-muted-foreground hover:text-foreground h-8 w-8 p-0"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </>
                  ) : (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => startEdit(item)}
                      className="text-muted-foreground hover:text-foreground h-8 w-8 p-0"
                    >
                      <Edit2 className="h-4 w-4" />
                    </Button>
                  )}
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => onRemove(item.id)}
                    className="text-muted-foreground hover:text-destructive h-8 w-8 p-0"
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      )}

      {/* Empty State */}
      {items.length === 0 && (
        <Card>
          <CardContent className="text-center py-8">
            <ShoppingCart className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
            <p className="text-muted-foreground">
              Daftar belanja kosong. Item akan otomatis ditambahkan ketika stok habis.
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};